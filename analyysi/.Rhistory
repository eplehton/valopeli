mean = mean   (xx[[col]], na.rm=na.rm),
sd   = sd     (xx[[col]], na.rm=na.rm)
)
},
measurevar
)
# Rename the "mean" column
datac <- rename(datac, c("mean" = measurevar))
datac$se <- datac$sd / sqrt(datac$N)  # Calculate standard error of the mean
# Confidence interval multiplier for standard error
# Calculate t-statistic for confidence interval:
# e.g., if conf.interval is .95, use .975 (above/below), and use df=N-1
ciMult <- qt(conf.interval/2 + .5, datac$N-1)
datac$ci <- datac$se * ciMult
return(datac)
}
## Norms the data within specified groups in a data frame; it normalizes each
## subject (identified by idvar) so that they have the same mean, within each group
## specified by betweenvars.
##   data: a data frame.
##   idvar: the name of a column that identifies each subject (or matched subjects)
##   measurevar: the name of a column that contains the variable to be summariezed
##   betweenvars: a vector containing names of columns that are between-subjects variables
##   na.rm: a boolean that indicates whether to ignore NA's
normDataWithin <- function(data=NULL, idvar, measurevar, betweenvars=NULL,
na.rm=FALSE, .drop=TRUE) {
library(plyr)
# Measure var on left, idvar + between vars on right of formula.
data.subjMean <- ddply(data, c(idvar, betweenvars), .drop=.drop,
.fun = function(xx, col, na.rm) {
c(subjMean = mean(xx[,col], na.rm=na.rm))
},
measurevar,
na.rm
)
# Put the subject means with original data
data <- merge(data, data.subjMean)
# Get the normalized data in a new column
measureNormedVar <- paste(measurevar, "_norm", sep="")
data[,measureNormedVar] <- data[,measurevar] - data[,"subjMean"] +
mean(data[,measurevar], na.rm=na.rm)
# Remove this subject mean column
data$subjMean <- NULL
return(data)
}
## Summarizes data, handling within-subjects variables by removing inter-subject variability.
## It will still work if there are no within-S variables.
## Gives count, un-normed mean, normed mean (with same between-group mean),
##   standard deviation, standard error of the mean, and confidence interval.
## If there are within-subject variables, calculate adjusted values using method from Morey (2008).
##   data: a data frame.
##   measurevar: the name of a column that contains the variable to be summariezed
##   betweenvars: a vector containing names of columns that are between-subjects variables
##   withinvars: a vector containing names of columns that are within-subjects variables
##   idvar: the name of a column that identifies each subject (or matched subjects)
##   na.rm: a boolean that indicates whether to ignore NA's
##   conf.interval: the percent range of the confidence interval (default is 95%)
summarySEwithin <- function(data=NULL, measurevar, betweenvars=NULL, withinvars=NULL,
idvar=NULL, na.rm=FALSE, conf.interval=.95, .drop=TRUE) {
# Ensure that the betweenvars and withinvars are factors
factorvars <- vapply(data[, c(betweenvars, withinvars), drop=FALSE],
FUN=is.factor, FUN.VALUE=logical(1))
if (!all(factorvars)) {
nonfactorvars <- names(factorvars)[!factorvars]
message("Automatically converting the following non-factors to factors: ",
paste(nonfactorvars, collapse = ", "))
data[nonfactorvars] <- lapply(data[nonfactorvars], factor)
}
# Get the means from the un-normed data
datac <- summarySE(data, measurevar, groupvars=c(betweenvars, withinvars),
na.rm=na.rm, conf.interval=conf.interval, .drop=.drop)
# Drop all the unused columns (these will be calculated with normed data)
datac$sd <- NULL
datac$se <- NULL
datac$ci <- NULL
# Norm each subject's data
ndata <- normDataWithin(data, idvar, measurevar, betweenvars, na.rm, .drop=.drop)
# This is the name of the new column
measurevar_n <- paste(measurevar, "_norm", sep="")
# Collapse the normed data - now we can treat between and within vars the same
ndatac <- summarySE(ndata, measurevar_n, groupvars=c(betweenvars, withinvars),
na.rm=na.rm, conf.interval=conf.interval, .drop=.drop)
# Apply correction from Morey (2008) to the standard error and confidence interval
#  Get the product of the number of conditions of within-S variables
nWithinGroups    <- prod(vapply(ndatac[,withinvars, drop=FALSE], FUN=nlevels,
FUN.VALUE=numeric(1)))
correctionFactor <- sqrt( nWithinGroups / (nWithinGroups-1) )
# Apply the correction factor
ndatac$sd <- ndatac$sd * correctionFactor
ndatac$se <- ndatac$se * correctionFactor
ndatac$ci <- ndatac$ci * correctionFactor
# Combine the un-normed means with the normed results
merge(datac, ndatac)
}
library(plyr)
library(ggplot2)
D <- read.table('data/datat.txt', sep=',', header=T)
describeBy(D, group = D$isTestGame)
success <- ddply(D, .(group, subId, roundId, isTestGame), summarise,
SIS = mean(successInStatic),
PTS = mean(pressesToSuccess),
Inter = mean(gameInterval),
MI = min(gameInterval),
PIC = mean(previousIntervalChange))
success.group <- ddply(D, .(group, roundId, isTestGame), summarise,
SIS = mean(successInStatic),
SISsd = sd(successInStatic),
PTS = mean(pressesToSuccess),
Inter = mean(gameInterval),
PIC = mean(previousIntervalChange))
#groups success
success.splitingroups <- split(success, success$group)
sucSummaryG1 <- summarySEwithin(success.splitingroups$`1`, measurevar="SIS", withinvar="roundId",
idvar="subId", na.rm=FALSE, conf.interval=.95)
successSummaryG2 <- summarySEwithin(success.splitingroups$`2`, measurevar="SIS", withinvar="roundId",
idvar="subId", na.rm=FALSE, conf.interval=.95)
successSummaryG3 <- summarySEwithin(success.splitingroups$`3`, measurevar="SIS", withinvar="roundId",
idvar="subId", na.rm=FALSE, conf.interval=.95)
succesSummary <- rbind(data successSummaryG1, data successSummaryG2, data successSummaryG3)
succesSummary <- rbind(data successSummaryG1, data successSummaryG2)
ggplot(success.group, aes(x=roundId, y=SIS, colour=factor(group))) +
geom_point() +
geom_line() +
facet_grid(isTestGame ~ ., scales = "free")
View(successSummaryG2)
View(sucSummaryG1)
View(successSummaryG3)
successSummaryG1 <- summarySEwithin(success.splitingroups$`1`, measurevar="SIS", withinvar="roundId",
idvar="subId", na.rm=FALSE, conf.interval=.95)
successSummaryG1 <- summarySEwithin(success.splitingroups$`1`, measurevar="SIS", withinvar="roundId",
idvar="subId", na.rm=FALSE, conf.interval=.95)
successSummaryG2 <- summarySEwithin(success.splitingroups$`2`, measurevar="SIS", withinvar="roundId",
idvar="subId", na.rm=FALSE, conf.interval=.95)
successSummaryG3 <- summarySEwithin(success.splitingroups$`3`, measurevar="SIS", withinvar="roundId",
idvar="subId", na.rm=FALSE, conf.interval=.95)
View(successSummaryG1)
View(successSummaryG2)
View(successSummaryG3)
succesSummary <- rbind(data successSummaryG1, data successSummaryG2)
succesSummary <- rbind(data successSummaryG1, data successSummaryG2)
View(successSummaryG1)
View(successSummaryG2)
View(successSummaryG3)
successSummary <- rbind(data successSummaryG1, data successSummaryG2)
success.splitingroups <- split(success, success$group)
successSummaryG1 <- summarySEwithin(success.splitingroups$`1`, measurevar="SIS", withinvar="roundId",
idvar="subId", na.rm=FALSE, conf.interval=.95)
successSummaryG2 <- summarySEwithin(success.splitingroups$`2`, measurevar="SIS", withinvar="roundId",
idvar="subId", na.rm=FALSE, conf.interval=.95)
successSummaryG3 <- summarySEwithin(success.splitingroups$`3`, measurevar="SIS", withinvar="roundId",
idvar="subId", na.rm=FALSE, conf.interval=.95)
successSummary <- rbind(data successSummaryG1, data successSummaryG2)
library(plyr)
library(ggplot2)
#helper functions *********************************************************
#summarySE
summarySE <- function(data=NULL, measurevar, groupvars=NULL, na.rm=FALSE,
conf.interval=.95, .drop=TRUE) {
library(plyr)
# New version of length which can handle NA's: if na.rm==T, don't count them
length2 <- function (x, na.rm=FALSE) {
if (na.rm) sum(!is.na(x))
else       length(x)
}
# This does the summary. For each group's data frame, return a vector with
# N, mean, and sd
datac <- ddply(data, groupvars, .drop=.drop,
.fun = function(xx, col) {
c(N    = length2(xx[[col]], na.rm=na.rm),
mean = mean   (xx[[col]], na.rm=na.rm),
sd   = sd     (xx[[col]], na.rm=na.rm)
)
},
measurevar
)
# Rename the "mean" column
datac <- rename(datac, c("mean" = measurevar))
datac$se <- datac$sd / sqrt(datac$N)  # Calculate standard error of the mean
# Confidence interval multiplier for standard error
# Calculate t-statistic for confidence interval:
# e.g., if conf.interval is .95, use .975 (above/below), and use df=N-1
ciMult <- qt(conf.interval/2 + .5, datac$N-1)
datac$ci <- datac$se * ciMult
return(datac)
}
## Norms the data within specified groups in a data frame; it normalizes each
## subject (identified by idvar) so that they have the same mean, within each group
## specified by betweenvars.
##   data: a data frame.
##   idvar: the name of a column that identifies each subject (or matched subjects)
##   measurevar: the name of a column that contains the variable to be summariezed
##   betweenvars: a vector containing names of columns that are between-subjects variables
##   na.rm: a boolean that indicates whether to ignore NA's
normDataWithin <- function(data=NULL, idvar, measurevar, betweenvars=NULL,
na.rm=FALSE, .drop=TRUE) {
library(plyr)
# Measure var on left, idvar + between vars on right of formula.
data.subjMean <- ddply(data, c(idvar, betweenvars), .drop=.drop,
.fun = function(xx, col, na.rm) {
c(subjMean = mean(xx[,col], na.rm=na.rm))
},
measurevar,
na.rm
)
# Put the subject means with original data
data <- merge(data, data.subjMean)
# Get the normalized data in a new column
measureNormedVar <- paste(measurevar, "_norm", sep="")
data[,measureNormedVar] <- data[,measurevar] - data[,"subjMean"] +
mean(data[,measurevar], na.rm=na.rm)
# Remove this subject mean column
data$subjMean <- NULL
return(data)
}
## Summarizes data, handling within-subjects variables by removing inter-subject variability.
## It will still work if there are no within-S variables.
## Gives count, un-normed mean, normed mean (with same between-group mean),
##   standard deviation, standard error of the mean, and confidence interval.
## If there are within-subject variables, calculate adjusted values using method from Morey (2008).
##   data: a data frame.
##   measurevar: the name of a column that contains the variable to be summariezed
##   betweenvars: a vector containing names of columns that are between-subjects variables
##   withinvars: a vector containing names of columns that are within-subjects variables
##   idvar: the name of a column that identifies each subject (or matched subjects)
##   na.rm: a boolean that indicates whether to ignore NA's
##   conf.interval: the percent range of the confidence interval (default is 95%)
summarySEwithin <- function(data=NULL, measurevar, betweenvars=NULL, withinvars=NULL,
idvar=NULL, na.rm=FALSE, conf.interval=.95, .drop=TRUE) {
# Ensure that the betweenvars and withinvars are factors
factorvars <- vapply(data[, c(betweenvars, withinvars), drop=FALSE],
FUN=is.factor, FUN.VALUE=logical(1))
if (!all(factorvars)) {
nonfactorvars <- names(factorvars)[!factorvars]
message("Automatically converting the following non-factors to factors: ",
paste(nonfactorvars, collapse = ", "))
data[nonfactorvars] <- lapply(data[nonfactorvars], factor)
}
# Get the means from the un-normed data
datac <- summarySE(data, measurevar, groupvars=c(betweenvars, withinvars),
na.rm=na.rm, conf.interval=conf.interval, .drop=.drop)
# Drop all the unused columns (these will be calculated with normed data)
datac$sd <- NULL
datac$se <- NULL
datac$ci <- NULL
# Norm each subject's data
ndata <- normDataWithin(data, idvar, measurevar, betweenvars, na.rm, .drop=.drop)
# This is the name of the new column
measurevar_n <- paste(measurevar, "_norm", sep="")
# Collapse the normed data - now we can treat between and within vars the same
ndatac <- summarySE(ndata, measurevar_n, groupvars=c(betweenvars, withinvars),
na.rm=na.rm, conf.interval=conf.interval, .drop=.drop)
# Apply correction from Morey (2008) to the standard error and confidence interval
#  Get the product of the number of conditions of within-S variables
nWithinGroups    <- prod(vapply(ndatac[,withinvars, drop=FALSE], FUN=nlevels,
FUN.VALUE=numeric(1)))
correctionFactor <- sqrt( nWithinGroups / (nWithinGroups-1) )
# Apply the correction factor
ndatac$sd <- ndatac$sd * correctionFactor
ndatac$se <- ndatac$se * correctionFactor
ndatac$ci <- ndatac$ci * correctionFactor
# Combine the un-normed means with the normed results
merge(datac, ndatac)
}
D <- read.table('data/datat.txt', sep=',', header=T)
describeBy(D, group = D$isTestGame)
success <- ddply(D, .(group, subId, roundId, isTestGame), summarise,
SIS = mean(successInStatic),
PTS = mean(pressesToSuccess),
Inter = mean(gameInterval),
MI = min(gameInterval),
PIC = mean(previousIntervalChange))
success.group <- ddply(D, .(group, roundId, isTestGame), summarise,
SIS = mean(successInStatic),
SISsd = sd(successInStatic),
PTS = mean(pressesToSuccess),
Inter = mean(gameInterval),
PIC = mean(previousIntervalChange))
success.splitingroups <- split(success, success$group)
successSummaryG1 <- summarySEwithin(success.splitingroups$`1`, measurevar="SIS", withinvar="roundId",
idvar="subId", na.rm=FALSE, conf.interval=.95)
successSummaryG2 <- summarySEwithin(success.splitingroups$`2`, measurevar="SIS", withinvar="roundId",
idvar="subId", na.rm=FALSE, conf.interval=.95)
successSummaryG3 <- summarySEwithin(success.splitingroups$`3`, measurevar="SIS", withinvar="roundId",
idvar="subId", na.rm=FALSE, conf.interval=.95)
successSummary <- rbind(data successSummaryG1, data successSummaryG2)
View(successSummaryG1)
View(successSummaryG2)
View(successSummaryG2)
View(successSummaryG2)
successSummary <- merge(data successSummaryG1, data successSummaryG2)
successSummary <- merge.data.frame(data successSummaryG1, data successSummaryG2)
library(plyr)
library(ggplot2)
#helper functions *********************************************************
#summarySE
summarySE <- function(data=NULL, measurevar, groupvars=NULL, na.rm=FALSE,
conf.interval=.95, .drop=TRUE) {
library(plyr)
# New version of length which can handle NA's: if na.rm==T, don't count them
length2 <- function (x, na.rm=FALSE) {
if (na.rm) sum(!is.na(x))
else       length(x)
}
# This does the summary. For each group's data frame, return a vector with
# N, mean, and sd
datac <- ddply(data, groupvars, .drop=.drop,
.fun = function(xx, col) {
c(N    = length2(xx[[col]], na.rm=na.rm),
mean = mean   (xx[[col]], na.rm=na.rm),
sd   = sd     (xx[[col]], na.rm=na.rm)
)
},
measurevar
)
# Rename the "mean" column
datac <- rename(datac, c("mean" = measurevar))
datac$se <- datac$sd / sqrt(datac$N)  # Calculate standard error of the mean
# Confidence interval multiplier for standard error
# Calculate t-statistic for confidence interval:
# e.g., if conf.interval is .95, use .975 (above/below), and use df=N-1
ciMult <- qt(conf.interval/2 + .5, datac$N-1)
datac$ci <- datac$se * ciMult
return(datac)
}
## Norms the data within specified groups in a data frame; it normalizes each
## subject (identified by idvar) so that they have the same mean, within each group
## specified by betweenvars.
##   data: a data frame.
##   idvar: the name of a column that identifies each subject (or matched subjects)
##   measurevar: the name of a column that contains the variable to be summariezed
##   betweenvars: a vector containing names of columns that are between-subjects variables
##   na.rm: a boolean that indicates whether to ignore NA's
normDataWithin <- function(data=NULL, idvar, measurevar, betweenvars=NULL,
na.rm=FALSE, .drop=TRUE) {
library(plyr)
# Measure var on left, idvar + between vars on right of formula.
data.subjMean <- ddply(data, c(idvar, betweenvars), .drop=.drop,
.fun = function(xx, col, na.rm) {
c(subjMean = mean(xx[,col], na.rm=na.rm))
},
measurevar,
na.rm
)
# Put the subject means with original data
data <- merge(data, data.subjMean)
# Get the normalized data in a new column
measureNormedVar <- paste(measurevar, "_norm", sep="")
data[,measureNormedVar] <- data[,measurevar] - data[,"subjMean"] +
mean(data[,measurevar], na.rm=na.rm)
# Remove this subject mean column
data$subjMean <- NULL
return(data)
}
## Summarizes data, handling within-subjects variables by removing inter-subject variability.
## It will still work if there are no within-S variables.
## Gives count, un-normed mean, normed mean (with same between-group mean),
##   standard deviation, standard error of the mean, and confidence interval.
## If there are within-subject variables, calculate adjusted values using method from Morey (2008).
##   data: a data frame.
##   measurevar: the name of a column that contains the variable to be summariezed
##   betweenvars: a vector containing names of columns that are between-subjects variables
##   withinvars: a vector containing names of columns that are within-subjects variables
##   idvar: the name of a column that identifies each subject (or matched subjects)
##   na.rm: a boolean that indicates whether to ignore NA's
##   conf.interval: the percent range of the confidence interval (default is 95%)
summarySEwithin <- function(data=NULL, measurevar, betweenvars=NULL, withinvars=NULL,
idvar=NULL, na.rm=FALSE, conf.interval=.95, .drop=TRUE) {
# Ensure that the betweenvars and withinvars are factors
factorvars <- vapply(data[, c(betweenvars, withinvars), drop=FALSE],
FUN=is.factor, FUN.VALUE=logical(1))
if (!all(factorvars)) {
nonfactorvars <- names(factorvars)[!factorvars]
message("Automatically converting the following non-factors to factors: ",
paste(nonfactorvars, collapse = ", "))
data[nonfactorvars] <- lapply(data[nonfactorvars], factor)
}
# Get the means from the un-normed data
datac <- summarySE(data, measurevar, groupvars=c(betweenvars, withinvars),
na.rm=na.rm, conf.interval=conf.interval, .drop=.drop)
# Drop all the unused columns (these will be calculated with normed data)
datac$sd <- NULL
datac$se <- NULL
datac$ci <- NULL
# Norm each subject's data
ndata <- normDataWithin(data, idvar, measurevar, betweenvars, na.rm, .drop=.drop)
# This is the name of the new column
measurevar_n <- paste(measurevar, "_norm", sep="")
# Collapse the normed data - now we can treat between and within vars the same
ndatac <- summarySE(ndata, measurevar_n, groupvars=c(betweenvars, withinvars),
na.rm=na.rm, conf.interval=conf.interval, .drop=.drop)
# Apply correction from Morey (2008) to the standard error and confidence interval
#  Get the product of the number of conditions of within-S variables
nWithinGroups    <- prod(vapply(ndatac[,withinvars, drop=FALSE], FUN=nlevels,
FUN.VALUE=numeric(1)))
correctionFactor <- sqrt( nWithinGroups / (nWithinGroups-1) )
# Apply the correction factor
ndatac$sd <- ndatac$sd * correctionFactor
ndatac$se <- ndatac$se * correctionFactor
ndatac$ci <- ndatac$ci * correctionFactor
# Combine the un-normed means with the normed results
merge(datac, ndatac)
}
#******************************************************************************************************
#read data
{
D <- read.table('data/datat.txt', sep=',', header=T)
describeBy(D, group = D$isTestGame)
success <- ddply(D, .(group, subId, roundId, isTestGame), summarise,
SIS = mean(successInStatic),
PTS = mean(pressesToSuccess),
Inter = mean(gameInterval),
MI = min(gameInterval),
PIC = mean(previousIntervalChange))
success.group <- ddply(D, .(group, roundId, isTestGame), summarise,
SIS = mean(successInStatic),
SISsd = sd(successInStatic),
PTS = mean(pressesToSuccess),
Inter = mean(gameInterval),
PIC = mean(previousIntervalChange))
}
#anova
{
success.tests$roundFact <- ordered(success.tests$roundId)
success.tests$groupFact <- factor(success.tests$group)
fm <- lm(SIS ~ roundFact * groupFact, data=success.tests)
summary(fm)
options("contrasts"=c("contr.sum", "contr.poly"))
library(car)
Anova(fm, type=3)
}
#groups success
successSummary <- summarySEwithin(success, measurevar = SIS, betweenvars = group, withinvars = roundId, idvar = subId,
na.rm = FALSE, conf.interval = .95, .drop = TRUE)
View(success)
successSummary <- summarySEwithin(success, measurevar = "SIS",
betweenvars = "group",
withinvars = "roundId",
idvar = "subId",
na.rm = FALSE, conf.interval = .95, .drop = TRUE)
View(successSummary)
View(success.group)
ggplot(successSummary, aes(x=roundId, y=SIS, colour=factor(group))) +
geom_point() +
geom_line() +
geom_errorbar(width=.1, aes(ymin=SIS-ci, ymax=SIS-ci)) +
facet_grid(isTestGame ~ ., scales = "free")
ggplot(successSummary, aes(x=roundId, y=SIS, colour=factor(group))) +
geom_point() +
geom_line() +
geom_errorbar(width=.1, aes(ymin=SIS-ci, ymax=SIS-ci))
successSummary <- summarySEwithin(success, measurevar = "SIS",
betweenvars = c("group","isTestGame"),
withinvars = "roundId",
idvar = "subId",
na.rm = FALSE, conf.interval = .95, .drop = TRUE)
ggplot(successSummary, aes(x=roundId, y=SIS, colour=factor(group))) +
geom_point() +
geom_line() +
geom_errorbar(width=.1, aes(ymin=SIS-ci, ymax=SIS-ci)) +
facet_grid(isTestGame ~ ., scales = "free")
ggplot(successSummary, aes(x=roundId, y=SIS, colour=factor(group))) +
geom_point() +
geom_line() +
geom_errorbar(width=.5, aes(ymin=SIS-ci, ymax=SIS-ci)) +
facet_grid(isTestGame ~ ., scales = "free")
ggplot(successSummary, aes(x=roundId, y=SIS, colour=factor(group))) +
geom_point() +
geom_line() +
geom_errorbar(width=.4, aes(ymin=SIS-ci, ymax=SIS-ci)) +
facet_grid(isTestGame ~ ., scales = "free")
ggplot(successSummary, aes(x=roundId, y=SIS, colour=factor(group))) +
geom_point() +
geom_line() +
geom_errorbar(width=.4, aes(ymin=SIS-ci, ymax=SIS+ci)) +
facet_grid(isTestGame ~ ., scales = "free")
ggplot(success.group, aes(x=roundId, y=SIS, colour=factor(group))) +
geom_point() +
geom_line() +
facet_grid(isTestGame ~ ., scales = "free")
pd <- position_dodge(0.2)
ggplot(successSummary, aes(x=roundId, y=SIS, colour=factor(group))) +
geom_point(position = pd) +
geom_line(position = pd) +
geom_errorbar(width=.4, aes(ymin=SIS-ci, ymax=SIS+ci), position = pd) +
facet_grid(isTestGame ~ ., scales = "free")
pd <- position_dodge(0.5)
ggplot(successSummary, aes(x=roundId, y=SIS, colour=factor(group))) +
geom_point(position = pd) +
geom_line(position = pd) +
geom_errorbar(width=.4, aes(ymin=SIS-ci, ymax=SIS+ci), position = pd) +
facet_grid(isTestGame ~ ., scales = "free")
pd <- position_dodge(1)
ggplot(successSummary, aes(x=roundId, y=SIS, colour=factor(group))) +
geom_point(position = pd) +
geom_line(position = pd) +
geom_errorbar(width=.4, aes(ymin=SIS-ci, ymax=SIS+ci), position = pd) +
facet_grid(isTestGame ~ ., scales = "free")
pd <- position_dodge(1)
ggplot(successSummary, aes(x=roundId, y=SIS, colour=factor(group))) +
geom_point(position = pd) +
geom_line(position = pd) +
geom_errorbar(width=.8, aes(ymin=SIS-ci, ymax=SIS+ci), position = pd) +
facet_grid(isTestGame ~ ., scales = "free")
ggplot(success.group, aes(x=roundId, y=SIS, colour=factor(group))) +
geom_point() +
geom_line() +
facet_grid(isTestGame ~ ., scales = "free")
ggplot(successSummary, aes(x=roundId, y=SIS, colour=factor(group))) +
geom_point(position = pd) +
geom_line(position = pd) +
geom_errorbar(width=.8, aes(ymin=SIS-ci, ymax=SIS+ci), position = pd) +
facet_grid(isTestGame ~ ., scales = "free")

axis.text.y  = element_text(size=6)) +
ylab("Successrate") +
facet_grid(isTestGame ~ ., labeller=labeller(isTestGame = labels), scales = "free") +
theme(strip.text.y = element_text(size = 10, angle=0),
strip.background = element_rect(colour ="white", fill = "#FFFFFF")) +
ggtitle("Successrate in training and testgames") +
theme(plot.title = element_text(size = 12))
ggplot(successSummary, aes(x=ordered(roundId), y=SIS, colour=factor(group), group=factor(group))) +
geom_point(position = pd, size = 1.2, aes(shape = factor(group))) +
geom_line(position = pd, size = 0.4) +
geom_errorbar(width=1, size = 0.4, aes(ymin=SIS-ci, ymax=SIS+ci), position = pd) +
xlab("Round") +
theme_classic() +
scale_shape_discrete(name="", labels=c("1"="hard", "2"="medium", "3"="easy")) +
scale_colour_discrete(name="", labels=c("1"="hard", "2"="medium", "3"="easy")) +
theme(legend.title=element_blank()) +
theme(legend.text = element_text(size = 8)) +
theme(legend.background = element_rect(fill="transparent", colour=NA)) +
theme(legend.position= c(1.14, 0.52)) +
theme(panel.grid.minor.x=element_blank(),
panel.grid.major.x=element_blank()) +
theme(axis.title.x = element_text(size=10),
axis.text.x  = element_text(size=6),
axis.ticks.x = element_blank()) +
theme(axis.title.y = element_text(angle=90, size=10),
axis.text.y  = element_text(size=6)) +
ylab("Successrate") +
facet_grid(isTestGame ~ ., labeller=labeller(isTestGame = labels), scales = "free") +
theme(strip.text.y = element_text(size = 10, angle=0),
strip.background = element_rect(colour ="white", fill = "#FFFFFF")) +
ggtitle("Successrate in training and testgames") +
theme(plot.title = element_text(size = 12))
dev.off()
pdf("plots.pdf", width=8/2.54, height=(8*(344/422))/2.54)
ggplot(successSummary, aes(x=ordered(roundId), y=SIS, colour=factor(group), group=factor(group))) +
geom_point(position = pd, size = 1.2, aes(shape = factor(group))) +
geom_line(position = pd, size = 0.4) +
geom_errorbar(width=1, size = 0.4, aes(ymin=SIS-ci, ymax=SIS+ci), position = pd) +
xlab("Round") +
theme_classic() +
scale_shape_discrete(name="", labels=c("1"="hard", "2"="medium", "3"="easy")) +
scale_colour_discrete(name="", labels=c("1"="hard", "2"="medium", "3"="easy")) +
theme(legend.title=element_blank()) +
theme(legend.text = element_text(size = 8)) +
theme(legend.background = element_rect(fill="transparent", colour=NA)) +
theme(legend.position= c(1.14, 0.52)) +
theme(panel.grid.minor.x=element_blank(),
panel.grid.major.x=element_blank()) +
theme(axis.title.x = element_text(size=10),
axis.text.x  = element_text(size=6),
axis.ticks.x = element_blank()) +
theme(axis.title.y = element_text(angle=90, size=10),
axis.text.y  = element_text(size=6)) +
ylab("Successrate") +
facet_grid(isTestGame ~ ., labeller=labeller(isTestGame = labels), scales = "free") +
theme(strip.text.y = element_text(size = 10, angle=0),
strip.background = element_rect(colour ="white", fill = "#FFFFFF")) +
ggtitle("Successrate in training and testgames") +
theme(plot.title = element_text(size = 12))
dev.off()
flow10.fm <- lm(flow10 ~ factor(group) + factor(sex) + age + liking + skill + f11 + f12 + f13, data = ans.roundmeans)
summary(flow10.fm)
Anova(flow10.fm, type=3)
lsm <- lsmeans(flow10.fm, pairwise ~ group)
summary(lsm)
lsm <- lsmeans(flow10.fm, poly ~ group)
summary(lsm)
library(plyr)
library(ggplot2)
library(car)
library(lsmeans)
#functions
{
# Multiple plot function
#
# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)
# - cols:   Number of columns in layout
# - layout: A matrix specifying the layout. If present, 'cols' is ignored.
#
# If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),
# then plot 1 will go in the upper left, 2 will go in the upper right, and
# 3 will go all the way across the bottom.
#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
}
#data bringing
{
ans <- read.table('kysely/kyselyt.txt', sep='\t', header=T)
attach(ans)
ans$sId[subId == "KH1"] <- "S01"
ans$sId[subId == "KH2"] <- "S02"
ans$sId[subId == "KH3"] <- "S03"
ans$sId[subId == "KH4"] <- "S04"
ans$sId[subId == "KH6"] <- "S06"
ans$sId[subId == "KH7"] <- "S07"
ans$sId[subId == "KH8"] <- "S08"
ans$sId[subId == "KH9"] <- "S09"
ans$sId[subId == "KH10"] <- "S10"
ans$sId[subId == "KH11"] <- "S11"
ans$sId[subId == "KH12"] <- "S12"
ans$sId[subId == "KH13"] <- "S13"
ans$sId[subId == "KH14"] <- "S14"
ans$sId[subId == "KH15"] <- "S15"
ans$sId[subId == "KH16"] <- "S16"
ans$sId[subId == "KH17"] <- "S17"
ans$sId[subId == "KH18"] <- "S18"
ans$sId[subId == "KH19"] <- "S19"
ans$sId[subId == "KH20"] <- "S20"
ans$sId[subId == "KH21"] <- "S21"
ans$sId[subId == "KH22"] <- "S22"
ans$sId[subId == "KH23"] <- "S23"
ans$sId[subId == "KH24"] <- "S24"
ans$sId[subId == "KH25"] <- "S25"
ans$sId[subId == "KH26"] <- "S26"
ans$sId[subId == "KH27"] <- "S27"
ans$sId[subId == "KH28"] <- "S28"
ans$sId[subId == "KH29"] <- "S29"
ans$sId[subId == "KH30"] <- "S30"
ans$sId[subId == "KH31"] <- "S31"
ans$sId[subId == "KH32"] <- "S32"
ans$sId[subId == "KH33"] <- "S33"
ans$sId[subId == "KH34"] <- "S34"
detach(ans)
attach(ans)
ans$roundId[kierros == 1] <- 5
ans$roundId[kierros == 2] <- 9
ans$roundId[kierros == 3] <- 13
detach(ans)
library(reshape)
ans <- rename(ans, c(subId="subId_old"))
ans <- rename(ans, c(sId="subId"))
attach(ans)
ans$f11rec7[f11 == 1] <- 1
ans$f11rec7[f11 == 2] <- 2.5
ans$f11rec7[f11 == 3] <- 4
ans$f11rec7[f11 == 4] <- 5.5
ans$f11rec7[f11 == 5] <- 7
ans$f11rec7[f11 == 6] <- 5.5
ans$f11rec7[f11 == 7] <- 4
ans$f11rec7[f11 == 8] <- 2.5
ans$f11rec7[f11 == 9] <- 1
detach(ans)
attach(ans)
ans$f12rec7[f12 == 1] <- 1
ans$f12rec7[f12 == 2] <- 2.5
ans$f12rec7[f12 == 3] <- 4
ans$f12rec7[f12 == 4] <- 5.5
ans$f12rec7[f12 == 5] <- 7
ans$f12rec7[f12 == 6] <- 5.5
ans$f12rec7[f12 == 7] <- 4
ans$f12rec7[f12 == 8] <- 2.5
ans$f12rec7[f12 == 9] <- 1
detach(ans)
attach(ans)
ans$f13rec7[f13 == 1] <- 1
ans$f13rec7[f13 == 2] <- 2.5
ans$f13rec7[f13 == 3] <- 4
ans$f13rec7[f13 == 4] <- 5.5
ans$f13rec7[f13 == 5] <- 7
ans$f13rec7[f13 == 6] <- 5.5
ans$f13rec7[f13 == 7] <- 4
ans$f13rec7[f13 == 8] <- 2.5
ans$f13rec7[f13 == 9] <- 1
detach(ans)
ans <- transform( ans,
flow10 = (f01 + f02 + f03 + f04 + f05 + f06 + f07 + f08 + f09 + f10)/10,
flow13 = (f01 + f02 + f03 + f04 + f05 + f06 + f07 + f08 + f09 + f10 + f11rec7 + f12rec7 + f13rec7)/13,
flow3 = (f11 + f12 + f13)/3,
motiv3 = (m01 + m02 + m03)/3,
difficulty = (f01 + f13rec7)/2
)
ans.roundmeans <- ddply (ans, .(group, subId), summarise,
f01 = mean(f01),
f02 = mean(f02),
f03 = mean(f03),
f04 = mean(f04),
f05 = mean(f05),
f06 = mean(f06),
f07 = mean(f07),
f08 = mean(f08),
f09 = mean(f09),
f10 = mean(f10),
f11 = mean(f11),
f12 = mean(f12),
f13 = mean(f13),
f11rec7 = mean (f11rec7),
f12rec7 = mean (f12rec7),
f13rec7 = mean (f13rec7),
m01 = mean(m01),
m02 = mean(m02),
m03 = mean(m03),
virkeys = mean(virkeys),
flow10 = mean(flow10),
flow13 = mean(flow13),
flow3 = mean(flow3),
motiv3 = mean(motiv3),
difficulty = mean(difficulty),
age = mean(age),
sex = mean(sex1n0m),
hand = mean(handedness1o0v),
playtime = mean(playtime),
gamespeed = mean(gamespeed),
game_exp = mean(game_exp),
liking = mean(liking),
skill = mean(skill)
)
ans.roundmeans.group <- ddply(ans.roundmeans, .(group), summarise,
f01 = mean(f01),
f02 = mean(f02),
f03 = mean(f03),
f04 = mean(f04),
f05 = mean(f05),
f06 = mean(f06),
f07 = mean(f07),
f08 = mean(f08),
f09 = mean(f09),
f10 = mean(f10),
f11 = mean(f11),
f12 = mean(f12),
f13 = mean(f13),
f11rec7 = mean (f11rec7),
f12rec7 = mean (f12rec7),
f13rec7 = mean (f13rec7),
m01 = mean(m01),
m02 = mean(m02),
m03 = mean(m03),
virkeys = mean(virkeys),
flow10 = mean(flow10),
flow13 = mean(flow13),
flow3 = mean(flow3),
motiv3 = mean(motiv3),
difficulty = mean(difficulty),
age = mean(age),
sex = mean(sex),
hand = mean(hand),
playtime = mean(playtime),
gamespeed = mean(gamespeed),
game_exp = mean(game_exp),
liking = mean(liking),
skill = mean(skill)
)
ans.group <- ddply(ans, .(group, kierros), summarise,
f01 = mean(f01),
f02 = mean(f02),
f03 = mean(f03),
f04 = mean(f04),
f05 = mean(f05),
f06 = mean(f06),
f07 = mean(f07),
f08 = mean(f08),
f09 = mean(f09),
f10 = mean(f10),
f11 = mean(f11),
f12 = mean(f12),
f13 = mean(f13),
f11rec7 = mean (f11rec7),
f12rec7 = mean (f12rec7),
f13rec7 = mean (f13rec7),
m01 = mean(m01),
m02 = mean(m02),
m03 = mean(m03),
virkeys = mean(virkeys),
flow10 = mean(flow10),
flow13 = mean(flow13),
flow3 = mean(flow3),
motiv3 = mean(motiv3),
difficulty = mean(difficulty),
age = mean(age),
sex = mean(sex1n0m),
hand = mean(handedness1o0v),
playtime = mean(playtime),
gamespeed = mean(gamespeed),
game_exp = mean(game_exp),
liking = mean(liking),
skill = mean(skill)
)
}
flow13.fm <- lm(flow13 ~ factor(group) + factor(sex) + age + liking + skill, data = ans.roundmeans)
summary(flow13.fm)
Anova(flow13.fm, type=3)
lsm <- lsmeans(flow13.fm, pairwise ~ group)
summary(lsm)
lsm <- lsmeans(flow13.fm, poly ~ group)
summary(lsm)
flow13.fm <- lm(flow13 ~ factor(group) + factor(sex) + age + liking + skill, data = ans.roundmeans)
summary(flow13.fm)
Anova(flow13.fm, type=3)
flow10.fm <- lm(flow10 ~ factor(group) + factor(sex) + age + liking + skill + f11 + f12 + f13, data = ans.roundmeans)
summary(flow10.fm)
Anova(flow10.fm, type=3)
flow10.fm <- lm(flow10 ~ f12, data = ans.roundmeans)
summary(flow10.fm)
Anova(flow10.fm, type=3)
f11.fm <- lm(f11 ~ factor(group) + factor(sex) + age + liking + skill, data = ans.roundmeans)
summary(f11.fm)
Anova(f11.fm, type=3)
f12.fm <- lm(f12 ~ factor(group) + factor(sex) + age + liking + skill, data = ans.roundmeans)
summary(f12.fm)
Anova(f12.fm, type=3)
motiv3.fm <- lm(motiv3 ~ factor(group) + factor(sex) + age + liking + skill, data = ans.roundmeans)
summary(motiv3.fm)
Anova(motiv3.fm, type=3)
library(plyr)
library(ggplot2)
library(car)
library(nlme)
library(lsmeans)
#helper functions *********************************************************
{
#summarySE
summarySE <- function(data=NULL, measurevar, groupvars=NULL, na.rm=FALSE,
conf.interval=.95, .drop=TRUE) {
library(plyr)
# New version of length which can handle NA's: if na.rm==T, don't count them
length2 <- function (x, na.rm=FALSE) {
if (na.rm) sum(!is.na(x))
else       length(x)
}
# This does the summary. For each group's data frame, return a vector with
# N, mean, and sd
datac <- ddply(data, groupvars, .drop=.drop,
.fun = function(xx, col) {
c(N    = length2(xx[[col]], na.rm=na.rm),
mean = mean   (xx[[col]], na.rm=na.rm),
sd   = sd     (xx[[col]], na.rm=na.rm)
)
},
measurevar
)
# Rename the "mean" column
datac <- rename(datac, c("mean" = measurevar))
datac$se <- datac$sd / sqrt(datac$N)  # Calculate standard error of the mean
# Confidence interval multiplier for standard error
# Calculate t-statistic for confidence interval:
# e.g., if conf.interval is .95, use .975 (above/below), and use df=N-1
ciMult <- qt(conf.interval/2 + .5, datac$N-1)
datac$ci <- datac$se * ciMult
return(datac)
}
## Norms the data within specified groups in a data frame; it normalizes each
## subject (identified by idvar) so that they have the same mean, within each group
## specified by betweenvars.
##   data: a data frame.
##   idvar: the name of a column that identifies each subject (or matched subjects)
##   measurevar: the name of a column that contains the variable to be summariezed
##   betweenvars: a vector containing names of columns that are between-subjects variables
##   na.rm: a boolean that indicates whether to ignore NA's
normDataWithin <- function(data=NULL, idvar, measurevar, betweenvars=NULL,
na.rm=FALSE, .drop=TRUE) {
library(plyr)
# Measure var on left, idvar + between vars on right of formula.
data.subjMean <- ddply(data, c(idvar, betweenvars), .drop=.drop,
.fun = function(xx, col, na.rm) {
c(subjMean = mean(xx[,col], na.rm=na.rm))
},
measurevar,
na.rm
)
# Put the subject means with original data
data <- merge(data, data.subjMean)
# Get the normalized data in a new column
measureNormedVar <- paste(measurevar, "_norm", sep="")
data[,measureNormedVar] <- data[,measurevar] - data[,"subjMean"] +
mean(data[,measurevar], na.rm=na.rm)
# Remove this subject mean column
data$subjMean <- NULL
return(data)
}
## Summarizes data, handling within-subjects variables by removing inter-subject variability.
## It will still work if there are no within-S variables.
## Gives count, un-normed mean, normed mean (with same between-group mean),
##   standard deviation, standard error of the mean, and confidence interval.
## If there are within-subject variables, calculate adjusted values using method from Morey (2008).
##   data: a data frame.
##   measurevar: the name of a column that contains the variable to be summariezed
##   betweenvars: a vector containing names of columns that are between-subjects variables
##   withinvars: a vector containing names of columns that are within-subjects variables
##   idvar: the name of a column that identifies each subject (or matched subjects)
##   na.rm: a boolean that indicates whether to ignore NA's
##   conf.interval: the percent range of the confidence interval (default is 95%)
summarySEwithin <- function(data=NULL, measurevar, betweenvars=NULL, withinvars=NULL,
idvar=NULL, na.rm=FALSE, conf.interval=.95, .drop=TRUE) {
# Ensure that the betweenvars and withinvars are factors
factorvars <- vapply(data[, c(betweenvars, withinvars), drop=FALSE],
FUN=is.factor, FUN.VALUE=logical(1))
if (!all(factorvars)) {
nonfactorvars <- names(factorvars)[!factorvars]
message("Automatically converting the following non-factors to factors: ",
paste(nonfactorvars, collapse = ", "))
data[nonfactorvars] <- lapply(data[nonfactorvars], factor)
}
# Get the means from the un-normed data
datac <- summarySE(data, measurevar, groupvars=c(betweenvars, withinvars),
na.rm=na.rm, conf.interval=conf.interval, .drop=.drop)
# Drop all the unused columns (these will be calculated with normed data)
datac$sd <- NULL
datac$se <- NULL
datac$ci <- NULL
# Norm each subject's data
ndata <- normDataWithin(data, idvar, measurevar, betweenvars, na.rm, .drop=.drop)
# This is the name of the new column
measurevar_n <- paste(measurevar, "_norm", sep="")
# Collapse the normed data - now we can treat between and within vars the same
ndatac <- summarySE(ndata, measurevar_n, groupvars=c(betweenvars, withinvars),
na.rm=na.rm, conf.interval=conf.interval, .drop=.drop)
# Apply correction from Morey (2008) to the standard error and confidence interval
#  Get the product of the number of conditions of within-S variables
nWithinGroups    <- prod(vapply(ndatac[,withinvars, drop=FALSE], FUN=nlevels,
FUN.VALUE=numeric(1)))
correctionFactor <- sqrt( nWithinGroups / (nWithinGroups-1) )
# Apply the correction factor
ndatac$sd <- ndatac$sd * correctionFactor
ndatac$se <- ndatac$se * correctionFactor
ndatac$ci <- ndatac$ci * correctionFactor
# Combine the un-normed means with the normed results
merge(datac, ndatac)
}
#******************************************************************************************************
}
#read data
{
D <- read.table('data/datat.txt', sep=',', header=T)
D.tests.flow <- merge(D, ans, by=c("subId", "roundId"))
success <- ddply(D, .(group, subId, roundId, isTestGame), summarise,
SIS = mean(successInStatic),
PTS = mean(pressesToSuccess),
Inter = mean(gameInterval),
MI = min(gameInterval),
PIC = mean(previousIntervalChange))
success.flow <- merge(success, ans, by=c("subId", "roundId"))
success.group <- ddply(D, .(group, roundId, isTestGame), summarise,
SIS = mean(successInStatic),
SISsd = sd(successInStatic),
PTS = mean(pressesToSuccess),
Inter = mean(gameInterval),
PIC = mean(previousIntervalChange))
success.subject <-  ddply(D, .(subId, roundId, isTestGame), summarise,
SIS = mean(successInStatic),
SISsd = sd(successInStatic),
PTS = mean(pressesToSuccess),
Inter = mean(gameInterval),
PIC = mean(previousIntervalChange))
}
SIS.fm <- lm(SIS ~  flow10 + motiv3 + f11 + f12 + f13 + age + liking + skill, data = success.flow)
summary(SIS.fm)
Anova(SIS.fm, type=3)
options(contrasts = c("contr.sum", "contr.poly"))
success.flow$roundId <- ordered(success.flow$roundId)
fm <- lme(SIS ~ flow10, random = ~ 1 | subId, data=success.flow)
intervals(fm)
summary(fm)
options(contrasts = c("contr.sum", "contr.poly"))
success.flow$roundId <- ordered(success.flow$roundId)
fm <- lme(SIS ~ flow10, random = ~ 1 | subId, data=success.flow)
intervals(fm)
SIS.fm <- lm(SIS ~  flow10 + motiv3 + f11 + f12 + f13 + age + liking + skill, data = success.flow)
summary(SIS.fm)
Anova(SIS.fm, type=3)
ggplot(success.flow, aes(x=liking, y=SIS)) +
geom_point(shape=1,
position=position_jitter(width=0.5,height=0)) +    # Use hollow circles
geom_smooth(method=lm,   # Add linear regression line
se=FALSE)    # Don't add shaded confidence region
ggplot(success.flow, aes(x=age, y=SIS)) +
geom_point(shape=1,
position=position_jitter(width=0.5,height=0)) +    # Use hollow circles
geom_smooth(method=lm,   # Add linear regression line
se=FALSE)    # Don't add shaded confidence region
ggplot(success.flow, aes(x=F12, y=SIS)) +
geom_point(shape=1,
position=position_jitter(width=0.5,height=0)) +    # Use hollow circles
geom_smooth(method=lm,   # Add linear regression line
se=FALSE)    # Don't add shaded confidence region
ggplot(success.flow, aes(x=f12, y=SIS)) +
geom_point(shape=1,
position=position_jitter(width=0.5,height=0)) +    # Use hollow circles
geom_smooth(method=lm,   # Add linear regression line
se=FALSE)    # Don't add shaded confidence region
SIS.fm <- lm(SIS ~  flow10 + motiv3 + f11 + f12 + f13 + age + liking + skill, data = success.flow)
summary(SIS.fm)
Anova(SIS.fm, type=3)
f12.fm <- lm(f12 ~  flow10 + motiv3 + f11 + SIS + f13 + age + liking + skill, data = success.flow)
summary(SIS.fm)
f12.fm <- lm(f12 ~  flow10 + motiv3 + f11 + SIS + f13 + age + liking + skill, data = success.flow)
summary(f12.fm)
